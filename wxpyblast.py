#!/usr/bin/env python

"""wxpyblast.py: A graphical interface to BioPython's NCBI Blast interface"""

__author__ = "Adam Caldwell"
__copyright__ = "(C) 2012 Adam Caldwell"
__license__ = "GPL"
__version__ = "11"
__maintainer__ = "Adam Caldwell"
__email__ = "adam.caldwell@gmail.com"

import sys, datetime, getopt, re, threading, wx, time, os, math
from Bio import SeqIO
from Bio.Blast import NCBIWWW, NCBIXML

def parseBlast(inputfile_handle,reportfile_handle,input_filename,tweakables):
	"""Parse XML BLAST results stored locally, or those just received from NCBI"""
	try:
		blast_records = list(NCBIXML.parse(inputfile_handle))
		header_written = False
		reportProgressWindow = wx.ProgressDialog("Parsing XML", "Report Generation Progress", len(blast_records),style=wx.PD_ELAPSED_TIME|wx.PD_REMAINING_TIME|wx.PD_AUTO_HIDE|wx.PD_APP_MODAL)
		reportProgressWindow.Update(0)
		remainingRecords = len(blast_records)	
		for blast_record in blast_records:
			if(header_written == False):
				print >> reportfile_handle, "File written by wxpyblast version", wxpyblast_version, "on", datetime.datetime.today().strftime("%Y/%m/%d %I:%M:%S %p")
				print >> reportfile_handle, "Input file", input_filename
				print >> reportfile_handle, "Results generated by", blast_record.application, "version", blast_record.version, "using", blast_record.database, "database"
				print >> reportfile_handle, "Parsing tweakables, max_e =", tweakables["max_e"], "max_results =", tweakables["max_results"], "min_ident =", tweakables["min_ident"], "min_coverage =", tweakables["min_coverage"], "regex-filter =", tweakables["filter_title_regex"]
				print >> reportfile_handle, "Output format = Accession & Description ; Max score ; Query Coverage (%) ; E value ; Max ident (%)"
				header_written = True		
			i = 0
			print >> reportfile_handle, "\nParsed results for", blast_record.query, "; Max score ; Query Coverage (%) ; E value ; Max ident (%)"
			for alignment in blast_record.alignments:
				if i < tweakables["max_results"]:
					for hsp in alignment.hsps:
						ident_percent = round(float(hsp.identities) / float(hsp.align_length), 3)*100
						coverage_percent = round(float(hsp.query_end - hsp.query_start + 1) / float(blast_record.query_length), 3)*100
						if (hsp.expect < tweakables["max_e"] and i < tweakables["max_results"] and ident_percent >= tweakables["min_ident"] and coverage_percent >= tweakables["min_coverage"]):
							if (tweakables["regexCheckbox"] == True):
								if re.search(tweakables["filter_title_regex"], alignment.title)==None:
									continue
								else:
									print >> reportfile_handle, re.sub(';','',alignment.title), ";", hsp.score, ";", coverage_percent, ";", hsp.expect, ";", ident_percent
									i += 1
							else:
								print >> reportfile_handle, re.sub(';','',alignment.title), ";", hsp.score, ";", coverage_percent, ";", hsp.expect, ";", ident_percent
								i += 1
				else:
					break
			if i == 0:
				print >> reportfile_handle, "No matches. Consider loosening filters."
			remainingRecords -= 1
			reportProgressWindow.Update(len(blast_records)-remainingRecords)
		return True	
	except:
		return False
			
class blastThread(threading.Thread):
	"""Threaded BLAST using nr database. Allows multiple queries to be sent off to NCBI, improving overall time to process a multisequence fasta.
	blast_status: 0 = not sent, 1 = blast successful, 2 = 3 errors returned, omit
	
	Note: In order to not flood NCBI servers and possibly end up on a block list, we have every thread grab a 3s lock before sending the request
	http://www.ncbi.nlm.nih.gov/blast/Doc/node60.html"""
	xml_lock = threading.Lock()
	ncbi_wait = threading.Lock()
	thread_pool = threading.Semaphore(24)
	def __init__(self,sequence_record,record_id):
		threading.Thread.__init__(self)
		self.sequence_record = sequence_record
		self.record_id = record_id
	def run(self):
		global remainingRecords, program, megablastFlag, errorlogfile, blastError
		blast_status = 0
		error_count = 0
		with blastThread.thread_pool:
			while blast_status is 0:
				try:
					with blastThread.ncbi_wait:
						time.sleep(5)
					result_handle = NCBIWWW.qblast(program, "nr", self.sequence_record, megablast = megablastFlag)					
					with blastThread.xml_lock:
						xml_file.write(result_handle.read())
						remainingRecords = remainingRecords - 1
					blast_status = 1
				except:
					error_count += 1
					if error_count == 3:
						blast_status = 2
						print >> errorlogfile, self.sequence_record
						remainingRecords = remainingRecords - 1
						blastError = True
				
class MainWindow(wx.Frame):
	def __init__(self, parent, id, title):
		wx.Frame.__init__(self, parent, id, title, size=(380, 320))
		panel = wx.Panel(self, -1)
		
		self.statusbar = self.CreateStatusBar()
		self.statusbar.SetStatusText("No file loaded")

		mainBox = wx.BoxSizer(wx.VERTICAL)

		min_optionsHeaderText = wx.StaticText(panel, -1, "Report Options")
		min_coverageText = wx.StaticText(panel, -1, "Minimum Query Coverage (%)")
		self.min_coverageSpinCtrl = wx.SpinCtrl (panel, -1, min=0, max=100, initial=0, value='0')
		min_identText = wx.StaticText(panel, -1, "Minimum Identity (%)")
		self.min_identSpinCtrl = wx.SpinCtrl (panel, -1, min=0, max=100, initial=0, value='0')
		max_resultsText = wx.StaticText(panel, -1, "Maximum Results")
		self.max_resultsSpinCtrl = wx.SpinCtrl (panel, -1, min=1, max=50, initial=12, value='12')
		max_eText = wx.StaticText(panel, -1, "Max E Value (10^)")
		self.max_eSpinCtrl = wx.SpinCtrl (panel, -1, min=-100, max=0, initial=-5, value='-5')
			
		mainBox.Add(min_optionsHeaderText,0,wx.ALIGN_CENTER_HORIZONTAL)
		mainBox.Add(min_coverageText,0,wx.EXPAND)
		mainBox.Add(self.min_coverageSpinCtrl,0,wx.EXPAND)
		mainBox.Add(min_identText,0,wx.EXPAND)
		mainBox.Add(self.min_identSpinCtrl,0,wx.EXPAND)
		mainBox.Add(max_resultsText,0,wx.EXPAND)
		mainBox.Add(self.max_resultsSpinCtrl,0,wx.EXPAND)
		mainBox.Add(max_eText,0,wx.EXPAND)
		mainBox.Add(self.max_eSpinCtrl,0,wx.EXPAND)

		regexFiltBox = wx.BoxSizer(wx.HORIZONTAL)
		self.regexCheckbox =  wx.CheckBox(panel, -1, label="Regex Filter")
		wx.EVT_CHECKBOX(self,-1,self.OnCheckbox)
		regexFiltBox.Add(self.regexCheckbox, 0)
		self.regexTextCtrl = wx.TextCtrl(panel, -1, size=(180, 22))
		regexFiltBox.Add(self.regexTextCtrl, 1, wx.EXPAND)
		self.regexTextCtrl.SetEditable(self.regexCheckbox.GetValue())
		mainBox.Add(regexFiltBox, 0, wx.LEFT |wx.RIGHT | wx.TOP | wx.EXPAND, 5)
		
		mainBox.Add((-1, 10))
		
		# Menu
		fileMenu=wx.Menu()
		fileMenu.Append(wx.ID_OPEN, "Open &Fasta", "Open Fasta File")
		fileMenu.Append(wx.ID_FILE, "Open &XML", "Open XML Blast Results")
		fileMenu.AppendSeparator()
		fileMenu.Append(wx.ID_EXIT, "&Quit", "Quit wxpyblast")
		helpMenu=wx.Menu()
		helpMenu.Append(wx.ID_ABOUT, "&About", "About wxpyblast")
		programMenu=wx.Menu()
		programMenu.AppendRadioItem(101, "blastn", "blastn")
		programMenu.AppendRadioItem(102, "blastp", "blastp")
		programMenu.AppendRadioItem(103, "blastx", "blastx")
		programMenu.AppendRadioItem(104, "tblastn", "tblastn")
		programMenu.AppendRadioItem(105, "tblastx", "tblastx")
		programMenu.AppendRadioItem(106, "megablast", "megablast")	
		# Menubar
		menuBar = wx.MenuBar()
		menuBar.Append(fileMenu, "&File")
		menuBar.Append(programMenu, "&Program")
		menuBar.Append(helpMenu, "&Help")
		self.SetMenuBar(menuBar)
		
		# Menu Event handlers
		wx.EVT_MENU(self, wx.ID_OPEN, self.OnOpenFasta)
		wx.EVT_MENU(self, wx.ID_FILE, self.OnOpenXML)
		wx.EVT_MENU(self, wx.ID_EXIT, self.OnQuit)
		wx.EVT_MENU(self, wx.ID_ABOUT, self.OnAbout)
		wx.EVT_MENU(self, 101, self.Onblastn)
		wx.EVT_MENU(self, 102, self.Onblastp)
		wx.EVT_MENU(self, 103, self.Onblastx)
		wx.EVT_MENU(self, 104, self.Ontblastn)
		wx.EVT_MENU(self, 105, self.Ontblastx)
		wx.EVT_MENU(self, 106, self.Onmegablast)

		panel.SetSizer(mainBox)
		self.Centre()
		mainBox.Fit(self)
		mainBox.SetSizeHints(self)
		self.Layout()
		self.Show(True)
		
		global program, megablastFlag
		program = "blastn"
		megablastFlag = False
	
	def Onblastn(self, event):
		global program, megablastFlag
		if event.IsChecked() == True:
			program = "blastn"
			megablastFlag = False
			
	def Onblastp(self, event):
		global program, megablastFlag
		if event.IsChecked() == True:
			program = "blastp"
			megablastFlag = False
			
	def Onblastx(self, event):
		global program, megablastFlag
		if event.IsChecked() == True:
			program = "blastx"
			megablastFlag = False
			
	def Ontblastn(self, event):
		global program, megablastFlag
		if event.IsChecked() == True:
			program = "tblastn"
			megablastFlag = False
			
	def Ontblastx(self, event):
		global program, megablastFlag
		if event.IsChecked() == True:
			program = "tblastx"
			megablastFlag = False
			
	def Onmegablast(self, event):
		global program, megablastFlag
		if event.IsChecked() == True:
			program = "blastn"
			megablastFlag = True
	
	def OnCheckbox(self,e):
		self.regexTextCtrl.SetEditable(self.regexCheckbox.GetValue())
		if self.regexCheckbox.GetValue() == False:	
			self.regexTextCtrl.Clear()
		
	def OnAbout(self, event):
		info = wx.AboutDialogInfo()
		info.SetName("wxpyblast")
		info.SetVersion(__version__)
		info.SetDescription(__doc__)
		info.SetCopyright(__copyright__)
		info.AddDeveloper(__author__)
		info.AddDocWriter(__author__)
		wx.AboutBox(info)
	
	def OnQuit(self,event=None):
		self.Close()
		sys.exit()
		
	def parseFailed(self):
		dlg = wx.MessageDialog(self, "No results returned? Check program.", "Parsing XML Failed", wx.OK|wx.ICON_ERROR)
		result = dlg.ShowModal()
		dlg.Destroy()
		
	def getTweakables(self):
		if self.regexCheckbox.GetValue() == True:
			self.filter_title_regex = self.regexTextCtrl.GetValue()
		else:
			self.filter_title_regex = None	
		self.tweakablesDict = dict(
		min_coverage=self.min_coverageSpinCtrl.GetValue(),
		 min_ident=self.min_identSpinCtrl.GetValue(),
		  max_results=self.max_resultsSpinCtrl.GetValue(),
		   max_e=math.pow(10,self.max_eSpinCtrl.GetValue()),
		    regexCheckbox=self.regexCheckbox.GetValue(),
		    filter_title_regex=self.filter_title_regex
		    )
					
	def OnOpenXML(self,e):
		self.getTweakables()
		openXmlDialog = wx.FileDialog(self, "Open Blast Results XML", "", "", "XML Blast Results (*.xml)|*.xml", wx.OPEN)
		if openXmlDialog.ShowModal() == wx.ID_OK:
			self.xml_filename=openXmlDialog.GetFilename()
			self.xml_dirname=openXmlDialog.GetDirectory()
			self.xml_path = os.path.join(self.xml_dirname, self.xml_filename)
			self.xmlfile = open(self.xml_path,'r')
			input_filename,xml_filename_ext = os.path.splitext(self.xml_filename)
			self.statusbar.SetStatusText("XML Loaded")
			openXmlDialog.Destroy()
			report_filename = input_filename+"_report.txt"
			reportDialog = wx.FileDialog(self, "Save report as", self.xml_dirname, report_filename, "*.txt", wx.SAVE | wx.OVERWRITE_PROMPT)
			if reportDialog.ShowModal() == wx.ID_OK:
				self.report_filename=reportDialog.GetFilename()
				self.report_dirname=reportDialog.GetDirectory()
				self.reportfile = open(os.path.join(self.report_dirname, self.report_filename), "w")
				reportDialog.Destroy()
				self.statusbar.SetStatusText("Parsing Blast Results")
				parseResult = parseBlast(self.xmlfile,self.reportfile,self.xml_path,self.tweakablesDict)
				if parseResult == False:
					self.parseFailed()
				self.reportfile.close()
				self.statusbar.SetStatusText("Report Written")

	def OnOpenFasta(self,e):
		"""Handles opening a new FASTA format sequence file, querying NCBI BLAST servers, and parsing results"""
		global xml_filename, xml_file, remainingRecords, errorlogfile, blastError
		blastError = False
		self.getTweakables()
		dlg = wx.FileDialog(self, "Open FASTA", "", "", "FASTA (*.fasta)|*.fasta", wx.OPEN)
		if dlg.ShowModal() == wx.ID_OK:
			self.fasta_filename=dlg.GetFilename()
			self.fasta_dirname=dlg.GetDirectory()
			self.fasta_path = os.path.join(self.fasta_dirname, self.fasta_filename)
			self.fastafile = open(self.fasta_path,'r')
			self.errorfilename = os.path.join(self.fasta_dirname,"ErrorLog_"+datetime.datetime.today().strftime("%Y%m%d_%I%M%S"+".fasta"))
			errorlogfile = open(self.errorfilename, "w")
			input_filename,fasta_filename_ext = os.path.splitext(self.fasta_filename)
			self.statusbar.SetStatusText("FASTA Loaded")
			dlg.Destroy()
			xmlDialog = wx.FileDialog(self, "Save XML as", self.fasta_dirname, input_filename+".xml", "XML Blast Results (*.xml)|*.xml", wx.SAVE | wx.OVERWRITE_PROMPT)
			if xmlDialog.ShowModal() == wx.ID_OK:
				self.xml_filename=xmlDialog.GetFilename()
				self.xml_dirname=xmlDialog.GetDirectory()
				self.xml_path = os.path.join(self.xml_dirname, self.xml_filename)
				xml_file = open(self.xml_path, "w")
				xmlDialog.Destroy()
				reportDialog = wx.FileDialog(self, "Save report as", self.xml_dirname, input_filename+"_report.txt", "Report (*.txt)|*.txt", wx.SAVE | wx.OVERWRITE_PROMPT)
				if reportDialog.ShowModal() == wx.ID_OK:
					self.report_filename=reportDialog.GetFilename()
					self.report_dirname=reportDialog.GetDirectory()
					self.reportfile = open(os.path.join(self.report_dirname, self.report_filename), "w")
					reportDialog.Destroy()
					records = list(SeqIO.parse(self.fastafile, "fasta"))
					self.fastafile.close()
					self.statusbar.SetStatusText("BLASTing "+str(len(records))+" sequences")
					blastProgressWindow = wx.ProgressDialog("BLASTing", "BLAST Progress", len(records),style=wx.PD_ELAPSED_TIME|wx.PD_REMAINING_TIME|wx.PD_AUTO_HIDE|wx.PD_APP_MODAL)
					remainingRecords = len(records)
					initialPulse = False
					for seq_record in records :		
						blastEngine = blastThread(seq_record.format("fasta"), seq_record.id).start()
					while (remainingRecords > 0):
						if len(records)-remainingRecords > 0:
							blastProgressWindow.Update(len(records)-remainingRecords)
						else:
							blastProgressWindow.Pulse()	
						if remainingRecords == 1:
							self.statusbar.SetStatusText("BLASTing "+str(len(records))+" sequences, "+str(remainingRecords)+" sequence left")
						else:
							self.statusbar.SetStatusText("BLASTing "+str(len(records))+" sequences, "+str(remainingRecords)+" sequences left")
						time.sleep(.1)
					blastProgressWindow.Update(len(records)-remainingRecords)
					xml_file.close()
					xml_file_read = open(self.xml_path, "r")
					self.statusbar.SetStatusText("Parsing Blast Results")
					parseResult = parseBlast(xml_file_read,self.reportfile,self.fasta_path,self.tweakablesDict)
					if parseResult == False:
						self.parseFailed()
					self.reportfile.close()
					self.statusbar.SetStatusText("Report Written")
					errorlogfile.close()
					if blastError == True:
						errdlg = wx.MessageDialog(self, "Failed sequences written to FASTA", "One or more sequences failed to BLAST", wx.OK|wx.ICON_ERROR)
						result = errdlg.ShowModal()
						errdlg.Destroy()
					else: 
						os.remove(self.errorfilename)

app = wx.App()
MainWindow(None, -1, 'wxpyblast')
app.MainLoop()
